import os
import psutil
import winreg
import requests

NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"


def get_system_info():
    """Gather system information including CPU, memory, disk usage, OS version, installed programs, and web apps."""
    info = {
        'cpu': psutil.cpu_percent(interval=1),
        'memory': psutil.virtual_memory().percent,
        'disk': psutil.disk_usage('C:\\').percent,
        'os_version': os.popen('ver').read().strip(),
        'installed_programs': get_installed_programs(),
        'web_apps': get_installed_web_apps()
    }
    return info


def get_installed_programs():
    """Retrieve a list of installed programs from the Windows registry."""
    programs = []
    reg_paths = [
        r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
        r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    ]
    for reg_path in reg_paths:
        try:
            reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_path)
            for i in range(winreg.QueryInfoKey(reg_key)[0]):
                sub_key = winreg.EnumKey(reg_key, i)
                sub_reg_key = winreg.OpenKey(reg_key, sub_key)
                try:
                    program_name = winreg.QueryValueEx(sub_reg_key, "DisplayName")[0]
                    programs.append(program_name)
                except FileNotFoundError:
                    continue
        except OSError:
            print(f"Error accessing the registry path: {reg_path}")
    return programs


def get_installed_web_apps():
    """Check for commonly used web applications by scanning known directories and files."""
    web_apps = []

    # Common web server and application framework directories
    common_paths = [
        "C:\\xampp",       # XAMPP
        "C:\\inetpub",     # IIS
        "C:\\wamp64",      # WAMP
        "C:\\Program Files\\Apache Group",  # Apache
        "C:\\Program Files (x86)\\Apache Group",
        "C:\\Program Files\\nginx",         # Nginx
        "C:\\Program Files (x86)\\nginx",
        "C:\\Program Files\\MySQL",         # MySQL
        "C:\\Program Files (x86)\\MySQL",
        "C:\\Program Files\\MongoDB",       # MongoDB
        "C:\\Program Files (x86)\\MongoDB"
    ]

    # Check if directories exist
    for path in common_paths:
        if os.path.exists(path):
            web_apps.append(os.path.basename(path))

    # Additional checks for specific files (e.g., configuration files)
    config_files = [
        ("IIS", "C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config"),
        ("Apache", "C:\\xampp\\apache\\conf\\httpd.conf"),
        ("Nginx", "C:\\nginx\\conf\\nginx.conf"),
        ("WAMP", "C:\\wamp64\\wampmanager.conf"),
        ("MySQL", "C:\\Program Files\\MySQL\\MySQL Server 8.0\\my.ini")
    ]

    for app_name, config_file in config_files:
        if os.path.exists(config_file):
            web_apps.append(app_name)

    return web_apps


def fetch_cve_data(start_index=0, results_per_page=20):
    """Fetch CVE data from the NVD API."""
    params = {
        'resultsPerPage': results_per_page,
        'startIndex': start_index,
    }
    response = requests.get(NVD_API_URL, params=params)
    if response.status_code == 200:
        data = response.json()
        return data.get('result', {}).get('CVE_Items', [])
    else:
        print("Failed to fetch CVE data.")
        return []


def check_known_vulnerabilities(system_info):
    """Check for known vulnerabilities related to the installed programs and web apps."""
    vulnerabilities = []
    start_index = 0
    results_per_page = 20

    while True:
        cve_data = fetch_cve_data(start_index, results_per_page)
        if not cve_data:
            break

        for cve in cve_data:
            cve_id = cve['cve']['CVE_data_meta']['ID']
            description = cve['cve']['description']['description_data'][0]['value']
            severity = cve['impact']['baseMetricV3']['cvssV3']['baseSeverity'] if 'impact' in cve and 'baseMetricV3' in cve['impact'] and 'cvssV3' in cve['impact']['baseMetricV3'] else 'UNKNOWN'

            # Check if the CVE description mentions any installed programs or web apps
            if any(program.lower() in description.lower() for program in system_info['installed_programs']) or \
                    any(web_app.lower() in description.lower() for web_app in system_info['web_apps']):
                vulnerabilities.append({
                    'id': cve_id,
                    'description': description,
                    'severity': severity
                })

        start_index += results_per_page

    return vulnerabilities


def generate_report(system_info, vulnerabilities):
    """Generate a vulnerability report and save it to a file."""
    report = "Vulnerability Report\n"
    report += "=" * 50 + "\n"
    report += "System Information:\n"
    report += f"CPU Usage: {system_info['cpu']}%\n"
    report += f"Memory Usage: {system_info['memory']}%\n"
    report += f"Disk Usage: {system_info['disk']}%\n"
    report += f"OS Version: {system_info['os_version']}\n"
    report += "Installed Programs:\n"
    for program in system_info['installed_programs']:
        report += f" - {program}\n"
    report += "Installed Web Applications:\n"
    for web_app in system_info['web_apps']:
        report += f" - {web_app}\n"
    report += "\nDetected Vulnerabilities:\n"
    report += "=" * 50 + "\n"
    for v in vulnerabilities:
        report += f"{v['id']} (Severity: {v['severity']}): {v['description']}\n"
    with open('vulnerability_report2.txt', 'w') as file:
        file.write(report)


def main():
    """Main function to run the vulnerability scan."""
    print("Running vulnerability scan...")
    system_info = get_system_info()
    vulnerabilities = check_known_vulnerabilities(system_info)
    generate_report(system_info, vulnerabilities)
    print("Scan complete. Report generated: vulnerability_report2.txt")


if __name__ == '__main__':
    main()
